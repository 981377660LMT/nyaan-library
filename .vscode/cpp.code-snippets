{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // "prefix": "log",
  // "body": [
  // "console.log('$1');",
  // "$2"
  // ],
  // "description": "Log output to console"
  // }
  "fps": {
    "prefix": "_fps",
    "body": [
      "#include \"modint/montgomery-modint.hpp\"",
      "#include \"modulo/binomial.hpp\"",
      "#include \"fps/ntt-friendly-fps.hpp\"",
      "using mint = LazyMontgomeryModInt<998244353>;",
      "Binomial<mint> C(2002002);",
      "using fps = FormalPowerSeries<mint>;"
    ],
    "description": "fps"
  },
  "dfs": {
    "prefix": "_dfs",
    "body": [
      "auto ${1:dfs} = [&](auto rec,int cur,int par = -1) -> void{",
      "  $0  ",
      "  each(dst , g[cur]){",
      "    if(dst == par) continue;",
      "    rec(rec , dst , cur);",
      "  }",
      "",
      "};",
      "${1:dfs}(${1:dfs} , 0);"
    ],
    "description": "dfs"
  },
  "bfs": {
    "prefix": "_bfs",
    "body": [
      "auto bfs = [&](int start = 0) {",
      "  queue<int> Q;",
      "  Q.push(start);",
      "  while (!Q.empty()) {",
      "    int cur = Q.front();",
      "    Q.pop();",
      "    for (auto dst : g[cur]) {",
      "      if (/* already visited */) continue;",
      "      // write down here",
      "",
      "      Q.push(dst);",
      "    }",
      "  }",
      "};",
      "bfs();"
    ],
    "description": "bfs"
  },
  "solve_function": {
    "prefix": "_sol",
    "body": [
      "#include \"competitive-template.hpp\"",
      "",
      "void solve(){",
      "  $0",
      "}"
    ],
    "description": "solve_function"
  },
  "solve_function_for_multitest": {
    "prefix": "_solve_for_multitest",
    "body": [
      "void q(){",
      "  $0",
      "}",
      "",
      "void solve(){",
      "  int T;",
      "  cin >> T;",
      "  for(int i = 0 ; i < T ; i++) q();",
      "}"
    ],
    "description": "solve_function_for_multitest"
  },"Square_Decomposition": {
    "prefix": "_SquareRootDecomposition",
    "body": [
      "struct block {",
      "  // S 作用素の型 T 要素の型",
      "  using S = ;",
      "  using T = ;",
      "",
      "  int i;",
      "",
      "  block() {}",
      "",
      "  // i ... 何個目のブロックか",
      "  // i * B + j ... (jをブロック内のidxとして)全体でのidx",
      "  int idx(int j) const { return i * B + j; }",
      "  ",
      "  // 変数とブロックの初期化を忘れない！",
      "  void init(int _) { ",
      "    i = _; ",
      "  }",
      "",
      "  void build() {",
      "",
      "  }",
      "",
      "  void update_all(S x) {",
      "",
      "  }",
      "",
      "  void update_part(int l, int r, S x) { ",
      "    ",
      "    build(); ",
      "  }",
      "",
      "  T query_all() {",
      "",
      "  }",
      "",
      "  T query_part(int l, int r) {",
      "",
      "  }",
      "};",
      ""
    ],
    "description": "Square_Decomposition"
  },
  "template": {
    "prefix": "_tmp",
    "body": [
      "#include \"competitive-template.hpp\"",
      "#include \"graph/graph-template.hpp\"",
      "#include \"modint/montgomery-modint.hpp\"",
      "template<uint32_t MOD>",
      "using Mint = LazyMontgomeryModInt<MOD>;",
      "",
      "void solve() {",
      "  ",
      "}"
    ],
    "description": "template"
  },
  "_mint": {
    "prefix": "_mint",
    "body": [
      "#include \"modint/montgomery-modint.hpp\"",
      "using mint = LazyMontgomeryModInt<998244353>;",
      "using vm = vector<mint>;",
      "using vvm = vector<vm>;",
      "#include \"modulo/binomial.hpp\"",
      "Binomial<mint> C;",
      ""
    ],
    "description": "_mint"
  }
}